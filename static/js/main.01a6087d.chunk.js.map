{"version":3,"sources":["components/Triangle.js","components/Card.js","container/CardList.js","container/Updater.js","App.js","serviceWorker.js","index.js"],"names":["Triangle","_ref","up","react_default","a","createElement","className","style","color","Card","data","name","this","props","price","rate","href","concat","target","rel","toString","substring","src_components_Triangle","Component","CardList","cards","map","card","i","src_components_Card","key","Updater","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","tick","asyncToGenerator","regenerator_default","mark","_callee","API","arrayOfPromises","tickers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","request","wrap","_context","prev","next","values","url","fetch","asyncIterator","sent","done","value","json","push","marketdata","t0","return","finish","abrupt","stop","_x","apply","arguments","getData","then","r","setState","loaded","indicators","state","_this2","unshift","join","timerID","setInterval","clearInterval","src_container_CardList","Date","toLocaleTimeString","App","container_Updater","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01a6087d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Triangle.css\"\r\n\r\nconst Triangle = ( {up} ) => { \r\n    return (\r\n        <span className = \"triangle\" style={{color: up ? \"#00c853\" : \"#f44336\"}}>\r\n        {up ? \"▲\" : \"▼\"}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Triangle;","import React, { Component } from 'react';\r\nimport Triangle from \"./Triangle\";\r\nimport \"./Card.css\"\r\n\r\nclass Card extends Component {   \r\n    render() {\r\n        \r\n        const data = {\r\n            \"name\": this.props.data[0],\r\n            \"price\": this.props.data[2] || \"-\", \r\n            \"rate\": this.props.data[25],\r\n        };\r\n        return (\r\n            <a href={`https://www.moex.com/ru/issue.aspx?board=TQBR&code=${data.name}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"card\" >                \r\n                <div className=\"title\">{data.name}</div>\r\n                <div className=\"price\">{data.price.toString().substring(0, 7)}</div>\r\n                <Triangle up={data.rate > 0 ? true : false}/>   <span className=\"rate\">{data.rate}%</span>\r\n            </a>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"../components/Card\"\r\nimport \"./CardList.css\"\r\n\r\nconst CardList = ({cards}) => {\r\n    return (\r\n        <div className=\"cardList\">\r\n            {                        \r\n                cards.map((card, i) => {return (<Card data={card} key = {i} />)})\r\n            }                        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\nimport CardList from \"./CardList\";\r\nimport {indicators} from '../indicators.json';\r\nimport {API} from '../api.json';\r\n\r\nclass Updater extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {   \r\n          loaded: false,  \r\n          \r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.unshift(\"https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/.json?securities=\" + indicators.join(\",\"))\r\n        this.timerID = setInterval(() => this.tick(), 3000);  \r\n        this.tick()       \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick = () => {        \r\n        const getData = async function(API) { // for await of\r\n            const arrayOfPromises = Object.values(API).map(url => fetch(url));\r\n            const tickers = [];\r\n            for await (let request of arrayOfPromises) {\r\n                const data = await request.json();\r\n                tickers.push(data.marketdata.data);\r\n            }\r\n            return tickers;\r\n        }\r\n    \r\n    getData(API)\r\n      .then(r => this.setState({\r\n        loaded: true,\r\n        indicators: r,\r\n      }))\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.state);\r\n        switch(this.state.loaded) {\r\n            default:\r\n                return (\r\n                    <p>LOADING...</p>\r\n                );\r\n            case true:\r\n                return (\r\n                    <div>\r\n                        <p>Я отслеживаю:</p>\r\n                        <CardList cards={this.state.indicators[0]} /> \r\n                        <p>Лидеры торгов:</p>  \r\n                        <CardList cards={this.state.indicators[1]} />   \r\n                        <p>Лидеры роста:</p>    \r\n                        <CardList cards={this.state.indicators[2]} /> \r\n                        <p>Лидеры падения:</p>    \r\n                        <CardList cards={this.state.indicators[3]} /> \r\n                        <p>Обновлено: <span className=\"time\">{new Date().toLocaleTimeString()}</span></p>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Updater;","import React, { Component } from 'react';\nimport Updater from \"./container/Updater\";\nimport './App.css';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Updater />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}